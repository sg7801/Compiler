<<<driver program>>> 
start 
end 
<<module empty>> 
takes input[a:boolean]; 
start 
end
declare module mod1;

<<<driver program>>>
start
declare v, r :integer;
get_value(v);
[r] := use module mod1 with parameters v;
print(r);
end

<<module mod1>>
takes input [a:integer];
returns [x:integer];
start
x:=a*a;
end

<<<driver program>>>

start
	declare a, b, c:integer;
	declare d, e:boolean;
	get_value(a);
	get_value(b);
	d := a>b;
	e := b>c;
	switch(d)
	start
		case true: 
			  switch(e)
				start
					case true: 
			   		print(a);
					break;
			   		
					case false: print(b);
			   		break;
				end
			   break;
		case false: print(b);
			   break;
	end
	
end
declare module readArr;

<<module arraySum>>
takes input[list:array[1..15] of    real, n:integer];
returns  [sum:real];
start
	declare index:integer;
	declare t:boolean;
	sum:=0.0;
	for(index in  1..15)
	start
		t:= index<=n;
		switch(t)
		start
			case true: print(list[index]);
				   sum:=sum+list[index];
				   break;
			case false: print(sum);
				    print(index);
				    **prints the values of sum and index  15-n times**
				    break;
		end
	end
	print(sum);
end


<<<driver program>>>
start
	declare A:array[1..15] of real;
	declare k:integer;
	declare s:real;
	get_value(k);
	use module readArr with parameters A,k;
	[s]:= use module arraySum with parameters A,k;
	print(s);
end

<<module readArr>>
takes input [arr1:array[1..15] of real,k:integer];
start
	declare tempvar:real;
	declare i:integer;
	i:=1;
	while(i<=k)
	start
		get_value(tempvar);
		arr1[i]:=tempvar;
		i:=i+1;
		** the semantics of while needs an increment and will be taken care of at the second phase**
	end
end


